# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    paths-ignore:
      - '*.md'
      - '.github/**'
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  flake8-lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
      - name: flake8 Lint
        uses: py-actions/flake8@v1
        
  pytest:
    needs: [flake8-lint]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest
            
  push_to_registry:
    needs: [pytest]
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: giasopas/piumossovpy
      
      - name: Build and push Docker imagee
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
   
      
  cd_process:
    name: Push zip file to s3
    runs-on: ubuntu-latest
    needs: [push_to_registry]
    
    steps:

      - name: Check out the repo
        uses: actions/checkout@v2 
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: eu-central-1
           
           
      - name: Deploy
        run : |
            zip -r deployment-${{ github.sha }}.zip Dockerrun.aws.json
            aws s3 cp deployment-${{ github.sha }}.zip s3://py-app-eb
            aws elasticbeanstalk create-application-version --application-name pyapp \
                --version-label ${{ github.sha }} --source-bundle S3Bucket="py-app-eb",S3Key="deployment-${{ github.sha }}.zip"
            aws elasticbeanstalk update-environment --application-name pyapp \
                --environment-name Pyapp-env --version-label ${{ github.sha }}
